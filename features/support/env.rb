# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require 'simplecov'
SimpleCov.start 'rails'
require 'cucumber/rails'
World(FactoryBot::Syntax::Methods)
require 'cucumber/rspec/doubles'
require 'vcr'

VCR.configure do |c|
    c.ignore_localhost = true
    #c.allow_http_connections_when_no_cassette = true
    c.cassette_library_dir = 'spec/cassettes'
    c.hook_into :webmock
    #c.debug_logger = STDOUT
end

VCR.cucumber_tags do |t|
   t.tags '@twitter_login_vcr', '@facebook_login_vcr', '@mastodon_login_vcr',:record => :new_episodes, :allow_playback_repeats => true
end

#Capybara.register_driver :selenium do |app|
#  Capybara::Selenium::Driver.new(app, :browser => :chrome)
#end
Capybara.javascript_driver = :selenium_chrome_headless

# Capybara defaults to CSS3 selectors rather than XPath.
# If you'd prefer to use XPath, just uncomment this line and adjust any
# selectors in your step definitions to use the XPath syntax.
# Capybara.default_selector = :xpath

# By default, any exception happening in your Rails application will bubble up
# to Cucumber so that your scenario will fail. This is a different from how
# your application behaves in the production environment, where an error page will
# be rendered instead.
#
# Sometimes we want to override this default behaviour and allow Rails to rescue
# exceptions and display an error page (just like when the app is running in production).
# Typical scenarios where you want to do this is when you test your error pages.
# There are two ways to allow Rails to rescue exceptions:
#
# 1) Tag your scenario (or feature) with @allow-rescue
#
# 2) Set the value below to true. Beware that doing this globally is not
# recommended as it will mask a lot of errors for you!
#
ActionController::Base.allow_rescue = false

# Remove/comment out the lines below if your app doesn't have a database.
# For some databases (like MongoDB and CouchDB) you may need to use :truncation instead.
begin
  DatabaseCleaner.strategy = :transaction
rescue NameError
  raise "You need to add database_cleaner to your Gemfile (in the :test group) if you wish to use it."
end

Before("@omniauth_test") do
    OmniAuth.config.test_mode = true
    OmniAuth.config.mock_auth[:twitter] = OmniAuth::AuthHash.new({
        :provider => 'twitter',
        :uid => '12345',
        :info => {
            :email => 'Test Email',
            :name => 'Test Name',
            :image => 'Test Image',
        },
        :credentials => {
            :token => '125787992-pHZADYAQKenEC9SbVcoiJRiNJYhaM41AnGCEZUC9',
            :secret => 'awRnIa0450TgSF5Ol9cFCCrDflYSOihe8499iJmWKeIkq'
        }
    })
    
    OmniAuth.config.mock_auth[:facebook] = OmniAuth::AuthHash.new({
        :provider => 'facebook',
        :uid => '12345',
        :info => {
            :email => 'Test Email',
            :nickname => 'Test Name',
            :image => 'Test Image',
        },
        :credentials => {
            :token => 'EAACBXgq1zpQBADx4kowWfZCWJfqd8gislm1ZAOqwvC4BTtXNgIpGrJ5jyrXOQ0beZBANetZB8D7H06MoMMenQnNJvemqq0ZA15tndtDCQ9C0gIkjZBIFml5qaZBxIKIZAnH2vD9cZC2QanH81tb6wcisFoZCiO8q75ZC5BpAvwHamVHQgZDZD',
            :secret => 'Secret'
        }
    })
    
    OmniAuth.config.mock_auth[:google_oauth2] = OmniAuth::AuthHash.new({
        :provider => 'google_oauth2',
        :uid => '12345',
        :info => {
            :email => 'Test Email',
            :name => 'Test Name',
            :image => 'Test Image',
        },
        :credentials => {
            :token => 'Token',
            :secret => 'Secret'
        }
    })
    
    OmniAuth.config.mock_auth[:mastodon] = OmniAuth::AuthHash.new({
        :provider => 'mastodon',
        :uid => '1234567',
        :info => {
            :email => 'Test Email',
            :name => 'Test Name',
            :image => 'Test Image',
        },
        :credentials => {
            :token => '34e967d13caaf2599ad2c7626889e1d4fb23fdd54f910700d8a74e5432a2910d',
            :secret => 'Secret'
        }
    })
    
    Rails.application.env_config["devise.mapping"] = Devise.mappings[:user]
end

Before("@omniauth_twitter_test") do
    Rails.application.env_config["omniauth.auth"] = OmniAuth.config.mock_auth[:twitter]
end

Before("@omniauth_facebook_test") do
    Rails.application.env_config["omniauth.auth"] = OmniAuth.config.mock_auth[:facebook]
end

Before("@omniauth_google_test") do
    Rails.application.env_config["omniauth.auth"] = OmniAuth.config.mock_auth[:google_oauth2]
end

Before("@omniauth_mastodon_test") do
    Rails.application.env_config["omniauth.auth"] = OmniAuth.config.mock_auth[:mastodon]
end

After("@omniauth_test") do 
    OmniAuth.config.test_mode = false
end


# You may also want to configure DatabaseCleaner to use different strategies for certain features and scenarios.
# See the DatabaseCleaner documentation for details. Example:
#
   Before('@no-txn,@selenium,@culerity,@celerity,@javascript') do
#     # { :except => [:widgets] } may not do what you expect here
#     # as Cucumber::Rails::Database.javascript_strategy overrides
#     # this setting.
     DatabaseCleaner.strategy = :truncation
   end
#
   Before('~@no-txn', '~@selenium', '~@culerity', '~@celerity', '~@javascript') do
        DatabaseCleaner.strategy = :transaction
   end
#

# Possible values are :truncation and :transaction
# The :transaction strategy is faster, but might give you threading problems.
# See https://github.com/cucumber/cucumber-rails/blob/master/features/choose_javascript_database_strategy.feature
Cucumber::Rails::Database.javascript_strategy = :truncation